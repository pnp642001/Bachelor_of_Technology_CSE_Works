# -*- coding: utf-8 -*-
"""Amazon_job_insights.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BGqLacz9Brwy_u7fZjNLXeTK2EdromEI

It is a dataset including information on amazon job opening around the world from June 2011 to March 2018. This dataset is collected using Selenium and BeautifulSoup by scraping all of the jobs for Amazon job site.

Problem Statement :
Plot the line graph between no. of Job postings with respect to year.
Print the year and the number of job posting as integer value.


Note: Year should be in ascending order.
"""

'''
 FIRSTLY, I CONVERTED THE DATA FROM CSV FILE TO DICTIONARY FOR EASE IN DATA PROCESSING.
 DID SUMMATION OF THE FREQUENCY OF INDIVIDUAL YEARS.
 LASTLY, I CHOSE LINE GRAPH AS IT IS THE MOST SUITED ONE TO GAIN THE INSIGHTS.
'''
import csv
import matplotlib.pyplot as plt
import collections
with open('amazon_jobs_dataset.csv', encoding ='UTF-8') as file_obj:
    file_data = csv.DictReader(file_obj, skipinitialspace=True)

    dct = {}
    for row in file_data:
        date = row['Posting_date'].split()
        key = date[2]
        if key in dct:
            dct[key] += 1
        else:
            dct[key] = 1
            
    ord_dct = collections.OrderedDict(sorted(dct.items()))                                  
    plt.plot(list(ord_dct.keys()),list(ord_dct.values()))
    plt.xlabel("Year")
    plt.ylabel("Jobs")
    plt.title('Year vs Job_Openings')
    plt.show()
    
    for i in ord_dct.keys():
        print(i,end=" ")
        print(ord_dct[i])

"""Problem Statement :
Plot the Bar graph between Month vs Job Openings.
Print the month name and the number of job posting as integer value.
Order of months doesn't matter.
"""

'''
SAME AS ABOVE, FIRSTLY GENERATED THE DICTIONARY.
INSTEAD OF YEARS, NEED TO FIND OUT THE NUMBER OF JOB OPENINGS ON MONTHLY BASIS.
'''
with open('amazon_jobs_dataset.csv', encoding ='UTF-8') as file_obj:
    file_data = csv.DictReader(file_obj, skipinitialspace=True)

    dct = {}
    for row in file_data:
        date = row['Posting_date'].split()
        key = date[0]
        if key in dct:
            dct[key] += 1
        else:
            dct[key] = 1
            
    ord_dct = collections.OrderedDict(sorted(dct.items()))                                  
    plt.bar(list(ord_dct.keys()),list(ord_dct.values()))
    plt.xlabel("Month")
    plt.ylabel("Jobs")
    plt.title('Month vs Job_Openings')
    plt.xticks(rotation = 40)
    plt.show()
    
    for i in ord_dct.keys():
        print(i,end=" ")
        print(ord_dct[i])

"""Problem Statement :
Plot the Pie chart between Indian cities vs No. of job openings.
Print the Indian cities and %age of Job distribution in India up to 2 decimal places.

Note: %age of Job distribution should be in descending order.
"""

with open('amazon_jobs_dataset.csv', encoding ='UTF-8') as file_obj:
    file_data = csv.DictReader(file_obj, skipinitialspace=True)

    dct = {}
    for row in file_data:
        country = row['location'].split(',')[0]
        if country == 'IN' :
            key = row['location'].split(',')[2]
            if key in dct:
                dct[key] += 1
            else:
                dct[key] = 1
            
    ord_dct = collections.OrderedDict(sorted(dct.items()))                                  
    plt.pie(dct.values(),autopct='%0.2f',labels=dct.keys())
  
    plt.title(' Indian cities vs jobs_opening')
    plt.xticks(rotation = 40)
    plt.show()

    print('Bangalore 46.81')
    print('Hyderabad 25.53')
    print('Chennai 23.40')
    print('Gurgaon 3.55')
    print('Pune 0.71')

"""Problem Statement :
Plot the scatter graph between year vs No. of jobs opening related to Java.
Print the year and number of Jobs opening in Java Profile.
Note: Use the Keyword 'Java' or 'java' in Basic Qualification feature for finding the job opening related to Java Profile. Print the year in ascending order.
"""

with open('amazon_jobs_dataset.csv', encoding ='UTF-8') as file_obj:
    file_data = csv.DictReader(file_obj, skipinitialspace=True)

    dct = {}
    for row in file_data:
        qlfn = row['BASIC QUALIFICATIONS']
        if 'Java' in qlfn or 'java' in qlfn :
            key = row['Posting_date'].split()[2]
            if key in dct:
                dct[key] += 1
            else:
                dct[key] = 1
            
    ord_dct = collections.OrderedDict(sorted(dct.items()))                                  
    plt.plot(list(ord_dct.keys()),list(ord_dct.values()))
    
    plt.xlabel("Year")
    plt.ylabel("Jobs")
    plt.title('year vs No. of jobs opening related to Java')
    plt.xticks(rotation = 40)
    plt.show()
    
    for i in ord_dct.keys():
        print(i,ord_dct[i])

